-- Keep enums as is
CREATE TYPE "public"."FriendshipStatus" AS ENUM ('PENDING', 'ACCEPTED', 'DECLINED', 'BLOCKED');
CREATE TYPE "public"."VenueType" AS ENUM ('BAR', 'CLUB', 'LOUNGE');

-- Create tables with underscored two-word table names
CREATE TABLE "public"."friendship" (
    "user_id1" uuid NOT NULL DEFAULT gen_random_uuid(),
    "user_id2" uuid NOT NULL DEFAULT gen_random_uuid(),
    "friendship_status" "FriendshipStatus" NOT NULL,
    "created_at" timestamp without time zone NOT NULL DEFAULT now()
);

ALTER TABLE "public"."friendship" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."notification" (
    "notification_id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "user_id" UUID NOT NULL DEFAULT gen_random_uuid(),
    "message" TEXT,
    "is_read" BOOLEAN NOT NULL DEFAULT FALSE,
    "created_at" timestamp without time zone NOT NULL DEFAULT now()
);

ALTER TABLE "public"."notification" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."review" (
    "review_id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "user_id" UUID NOT NULL DEFAULT gen_random_uuid(),
    "venue_id" UUID DEFAULT gen_random_uuid(),
    "overall_rating" BIGINT,
    "ambiance_rating" BIGINT,
    "music_rating" BIGINT,
    "crowd_rating" BIGINT,
    "service_rating" BIGINT,
    "review_text" TEXT,
    "created_at" TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMP WITHOUT TIME ZONE
);

ALTER TABLE "public"."review" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."search_history" (
    "search_id" BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    "user_id" UUID DEFAULT gen_random_uuid(),
    "search_term" TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    "search_time" TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now()
);

ALTER TABLE "public"."search_history" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."user" (
    "user_id" UUID NOT NULL DEFAULT gen_random_uuid(),
    "first_name" VARCHAR NOT NULL,
    "username" VARCHAR NOT NULL,
    "email" VARCHAR NOT NULL,
    "age" BIGINT NOT NULL,
    "location" geography NOT NULL,
    "profile_picture_url" VARCHAR,
    "created_at" TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
    "updated_at" TIMESTAMP WITHOUT TIME ZONE
);

ALTER TABLE "public"."user" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."user_preference" (
    "user_id" UUID NOT NULL,
    "preference_type" VARCHAR NOT NULL,
    "preference_value" VARCHAR NOT NULL
);

ALTER TABLE "public"."user_preference" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."venue" (
    "venue_id" UUID NOT NULL DEFAULT gen_random_uuid(),
    "name" VARCHAR NOT NULL,
    "address" VARCHAR NOT NULL,
    "city" VARCHAR,
    "state" VARCHAR,
    "zip_code" VARCHAR,
    "location" geography NOT NULL,
    "venue_type" "VenueType" NOT NULL,
    "created_at" TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now(),
    "updated_at" TIMESTAMP WITHOUT TIME ZONE
);

ALTER TABLE "public"."venue" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."venue_attribute" (
    "venue_id" UUID NOT NULL,
    "attribute_type" VARCHAR NOT NULL,
    "attribute_value" VARCHAR NOT NULL
);

ALTER TABLE "public"."venue_attribute" ENABLE ROW LEVEL SECURITY;

CREATE TABLE "public"."venue_photo" (
    "photo_id" UUID NOT NULL DEFAULT gen_random_uuid(),
    "review_id" UUID NOT NULL,
    "user_id" UUID NOT NULL,
    "photo_url" VARCHAR NOT NULL,
    "caption" TEXT,
    "uploaded_at" TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT now()
);

ALTER TABLE "public"."venue_photo" ENABLE ROW LEVEL SECURITY;

-- Create indexes with updated table names
CREATE UNIQUE INDEX "friendship_pkey" ON public."friendship" USING btree (user_id1, user_id2);
CREATE UNIQUE INDEX "notification_notification_id_key" ON public."notification" USING btree (notification_id);
CREATE UNIQUE INDEX "notification_pkey" ON public."notification" USING btree (notification_id);
CREATE UNIQUE INDEX "review_pkey" ON public."review" USING btree (review_id);
CREATE UNIQUE INDEX "review_review_id_key" ON public."review" USING btree (review_id);
CREATE UNIQUE INDEX "search_history_pkey" ON public."search_history" USING btree (search_id);
CREATE UNIQUE INDEX "search_history_search_id_key" ON public."search_history" USING btree (search_id);
CREATE UNIQUE INDEX "user_preference_pkey" ON public."user_preference" USING btree (user_id, preference_type, preference_value);
CREATE UNIQUE INDEX "user_email_key" ON public."user" USING btree (email);
CREATE UNIQUE INDEX "user_pkey" ON public."user" USING btree (user_id);
CREATE UNIQUE INDEX "user_username_key" ON public."user" USING btree (username);
CREATE UNIQUE INDEX "venue_attribute_pkey" ON public."venue_attribute" USING btree (venue_id, attribute_type, attribute_value);
CREATE UNIQUE INDEX "venue_photo_pkey" ON public."venue_photo" USING btree (photo_id);
CREATE UNIQUE INDEX "venue_pkey" ON public."venue" USING btree (venue_id);

-- Add primary key constraints
ALTER TABLE "public"."friendship" ADD CONSTRAINT "friendship_pkey" PRIMARY KEY USING INDEX "friendship_pkey";
ALTER TABLE "public"."notification" ADD CONSTRAINT "notification_pkey" PRIMARY KEY USING INDEX "notification_pkey";
ALTER TABLE "public"."review" ADD CONSTRAINT "review_pkey" PRIMARY KEY USING INDEX "review_pkey";
ALTER TABLE "public"."search_history" ADD CONSTRAINT "search_history_pkey" PRIMARY KEY USING INDEX "search_history_pkey";
ALTER TABLE "public"."user" ADD CONSTRAINT "user_pkey" PRIMARY KEY USING INDEX "user_pkey";
ALTER TABLE "public"."user_preference" ADD CONSTRAINT "user_preference_pkey" PRIMARY KEY USING INDEX "user_preference_pkey";
ALTER TABLE "public"."venue" ADD CONSTRAINT "venue_pkey" PRIMARY KEY USING INDEX "venue_pkey";
ALTER TABLE "public"."venue_attribute" ADD CONSTRAINT "venue_attribute_pkey" PRIMARY KEY USING INDEX "venue_attribute_pkey";
ALTER TABLE "public"."venue_photo" ADD CONSTRAINT "venue_photo_pkey" PRIMARY KEY USING INDEX "venue_photo_pkey";

-- Add foreign key constraints
ALTER TABLE "public"."friendship" ADD CONSTRAINT "friendship_user_id1_fkey" FOREIGN KEY (user_id1) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."friendship" VALIDATE CONSTRAINT "friendship_user_id1_fkey";
ALTER TABLE "public"."friendship" ADD CONSTRAINT "friendship_user_id2_fkey" FOREIGN KEY (user_id2) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."friendship" VALIDATE CONSTRAINT "friendship_user_id2_fkey";

ALTER TABLE "public"."notification" ADD CONSTRAINT "notification_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."notification" VALIDATE CONSTRAINT "notification_user_id_fkey";

ALTER TABLE "public"."review" ADD CONSTRAINT "review_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."review" VALIDATE CONSTRAINT "review_user_id_fkey";
ALTER TABLE "public"."review" ADD CONSTRAINT "review_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES "public"."venue" (venue_id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;
ALTER TABLE "public"."review" VALIDATE CONSTRAINT "review_venue_id_fkey";

ALTER TABLE "public"."search_history" ADD CONSTRAINT "search_history_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."search_history" VALIDATE CONSTRAINT "search_history_user_id_fkey";

ALTER TABLE "public"."user_preference" ADD CONSTRAINT "user_preference_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."user_preference" VALIDATE CONSTRAINT "user_preference_user_id_fkey";

ALTER TABLE "public"."venue_attribute" ADD CONSTRAINT "venue_attribute_venue_id_fkey" FOREIGN KEY (venue_id) REFERENCES "public"."venue" (venue_id) ON UPDATE CASCADE ON DELETE CASCADE NOT VALID;
ALTER TABLE "public"."venue_attribute" VALIDATE CONSTRAINT "venue_attribute_venue_id_fkey";

ALTER TABLE "public"."venue_photo" ADD CONSTRAINT "venue_photo_user_id_fkey" FOREIGN KEY (user_id) REFERENCES "public"."user" (user_id) ON UPDATE CASCADE ON DELETE SET NULL NOT VALID;
ALTER TABLE "public"."venue_photo" VALIDATE CONSTRAINT "venue_photo_user_id_fkey";

-- Grant permissions for lowercase table names
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.friendship TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.notification TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.review TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.search_history TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.user TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.user_preference TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.venue TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.venue_attribute TO anon, authenticated, service_role;
GRANT DELETE, INSERT, REFERENCES, SELECT, TRIGGER, TRUNCATE, UPDATE ON public.venue_photo TO anon, authenticated, service_role;

-- Create extension
CREATE EXTENSION IF NOT EXISTS "postgis" WITH SCHEMA "public" VERSION '3.3.2';
